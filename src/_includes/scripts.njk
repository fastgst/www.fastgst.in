<!-- Common Scripts - Optimized for mobile performance -->
<script>
    // Mobile menu toggle functionality
    document.addEventListener('DOMContentLoaded', function() {
        var menuButton = document.getElementById('mobile-menu-button');
        var mobileMenu = document.getElementById('mobile-menu');
        var menuOpenIcon = document.getElementById('menu-open-icon');
        var menuCloseIcon = document.getElementById('menu-close-icon');
        
        if (menuButton && mobileMenu) {
            menuButton.addEventListener('click', function() {
                var isExpanded = menuButton.getAttribute('aria-expanded') === 'true';
                
                // Toggle menu visibility
                mobileMenu.classList.toggle('hidden');
                
                // Toggle icons
                menuOpenIcon.classList.toggle('hidden');
                menuCloseIcon.classList.toggle('hidden');
                
                // Update aria-expanded attribute
                menuButton.setAttribute('aria-expanded', !isExpanded);
            });
            
            // Close mobile menu when clicking on a link
            var mobileMenuLinks = mobileMenu.querySelectorAll('a');
            mobileMenuLinks.forEach(function(link) {
                link.addEventListener('click', function() {
                    mobileMenu.classList.add('hidden');
                    menuOpenIcon.classList.remove('hidden');
                    menuCloseIcon.classList.add('hidden');
                    menuButton.setAttribute('aria-expanded', 'false');
                });
            });
        }
    });

    // Helper function to safely call gtag (handles case where GA hasn't loaded yet)
    function safeGtag() {
        if (typeof gtag === 'function') {
            gtag.apply(null, arguments);
        }
    }

    // Notification helper function - Defer on mobile for performance
    function sendNotification(title, text) {
        // Defer notifications on slower connections
        if ('requestIdleCallback' in window) {
            requestIdleCallback(function() {
                fetch('https://api.console.fastgst.in/global/notify', {
                    method: 'POST',
                    headers: {
                        'accept': '*/*',
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        title: title,
                        text: text
                    })
                }).catch(function(error) {
                    // Silently fail - don't disrupt user experience
                });
            }, { timeout: 3000 });
        } else {
            fetch('https://api.console.fastgst.in/global/notify', {
                method: 'POST',
                headers: {
                    'accept': '*/*',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    title: title,
                    text: text
                })
            }).catch(function(error) {
                // Silently fail - don't disrupt user experience
            });
        }
    }

    // Send page visit notification
    window.addEventListener('load', function() {
        {% if page.url == '/' %}
        window.scrollTo(0, 0);
        sendNotification('ðŸ‘€ FastGST.in', window.location.href);
        
        // Track Funnel Step 1: Homepage Visit
        safeGtag('event', 'funnel_step', {
            'event_category': 'Conversion_Funnel',
            'event_label': 'Step_1_Homepage_Visit',
            'step_number': 1,
            'step_name': 'Homepage Visit'
        });
        {% else %}
        sendNotification('ðŸ‘€ FastGST.in', window.location.href);
        {% endif %}

        // Track Pricing Page View (High Purchase Intent)
        {% if page.url and '/pricing' in page.url %}
        safeGtag('event', 'view_item', {
            'event_category': 'Pricing',
            'event_label': 'Pricing_Page_View',
            'value': 1
        });
        
        // Track Funnel Step 4: Pricing Page Visit
        safeGtag('event', 'funnel_step', {
            'event_category': 'Conversion_Funnel',
            'event_label': 'Step_4_Pricing_Visit',
            'step_number': 4,
            'step_name': 'Pricing Page Visit'
        });
        {% endif %}
    });

    {% if page.url == '/' %}
    // Also scroll to top immediately
    if (history.scrollRestoration) {
        history.scrollRestoration = 'manual';
    }
    window.scrollTo(0, 0);
    {% endif %}

    // Track critical conversion events on link clicks
    document.addEventListener('click', function(e) {
        var target = e.target.closest('a');
        if (!target) return;
        
        var href = target.getAttribute('href');
        
        // Track API Documentation Access (Learning Intent)
        if (href && href.includes('docs.taxlookupapi.fastgst.in')) {
            sendNotification('ðŸ‘€ FastGST.in', window.location.href);
            safeGtag('event', 'select_content', {
                'content_type': 'documentation',
                'event_category': 'Documentation',
                'event_label': 'API_Docs_Viewed'
            });
            
            // Track Funnel Step 3: Documentation Viewed
            safeGtag('event', 'funnel_step', {
                'event_category': 'Conversion_Funnel',
                'event_label': 'Step_3_Docs_Viewed',
                'step_number': 3,
                'step_name': 'Documentation Viewed'
            });
        } 
        // Track Swagger UI Access (Technical Intent)
        else if (href && href.includes('api.taxlookup.fastgst.in/swagger')) {
            sendNotification('ðŸ‘€ FastGST.in', window.location.href);
            safeGtag('event', 'select_content', {
                'content_type': 'swagger',
                'event_category': 'Technical_Docs',
                'event_label': 'Swagger_UI_Opened'
            });
            
            // Track Funnel Step 3: Swagger Viewed (Alternative to Docs)
            safeGtag('event', 'funnel_step', {
                'event_category': 'Conversion_Funnel',
                'event_label': 'Step_3_Swagger_Viewed',
                'step_number': 3,
                'step_name': 'Swagger Viewed'
            });
        } 
        // Track API Console Launch (Product Trial - Critical!)
        else if (href && href.includes('console.fastgst.in')) {
            sendNotification('ðŸ‘€ FastGST.in', window.location.href);
            safeGtag('event', 'begin_checkout', {
                'event_category': 'Product_Trial',
                'event_label': 'Console_Launched'
            });
            // Also track as lead generation
            safeGtag('event', 'generate_lead', {
                'event_category': 'API_Signup',
                'event_label': 'Console_Access_Requested',
                'value': 1,
                'currency': 'INR'
            });
            
            // Track Funnel Step 5: Conversion - Console Launched
            safeGtag('event', 'funnel_step', {
                'event_category': 'Conversion_Funnel',
                'event_label': 'Step_5_Console_Launched',
                'step_number': 5,
                'step_name': 'Console Launched - CONVERSION'
            });
        }
    });

    // Defer non-critical interactions for better performance
    function initNonCriticalScripts() {
        // Smooth scrolling for anchor links
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });

        // Exit Intent Tracking (Global)
        document.addEventListener('mouseleave', function(e) {
            if (e.clientY < 0 && !window.exitTracked) {
                window.exitTracked = true;
                safeGtag('event', 'exit_intent', {
                    'event_category': 'User_Behavior',
                    'event_label': 'Attempted_Exit',
                    'page': window.location.pathname
                });
            }
        });
    }
    
    // Run non-critical scripts when idle
    if ('requestIdleCallback' in window) {
        requestIdleCallback(initNonCriticalScripts, { timeout: 2000 });
    } else {
        setTimeout(initNonCriticalScripts, 1000);
    }
</script>

{% if customScripts %}
{{ customScripts | safe }}
{% endif %}

{% if page.url == '/' %}
<script>
    // Homepage CTA Tracking with Location Context
    document.addEventListener('DOMContentLoaded', function() {
        // Track Console Launch Button (Hero Section)
        var consoleButtons = document.querySelectorAll('a[href*="console.fastgst.in"]');
        consoleButtons.forEach(function(btn) {
            btn.addEventListener('click', function() {
                var location = 'unknown';
                if (this.closest('section[id="top"]')) {
                    location = 'hero_section';
                } else if (this.closest('section')) {
                    location = 'other_section';
                }
                
                safeGtag('event', 'cta_click', {
                    'event_category': 'Homepage_CTA',
                    'event_label': 'Launch_Console_Button',
                    'cta_location': location
                });
            });
        });

        // Track GST Council Banner Clicks (56th GST Council Update)
        var gstBanner = document.querySelector('.relative.max-w-3xl');
        if (gstBanner && gstBanner.textContent.includes('56')) {
            gstBanner.style.cursor = 'pointer';
            gstBanner.addEventListener('click', function() {
                safeGtag('event', 'banner_click', {
                    'event_category': 'Announcements',
                    'event_label': '56th_GST_Council_Update'
                });
            });
        }

        // Track Demo Section Scroll (When API Demo comes into view)
        var demoSection = document.getElementById('api-demo');
        if (demoSection) {
            var demoObserver = new IntersectionObserver(function(entries) {
                entries.forEach(function(entry) {
                    if (entry.isIntersecting && !window.demoViewTracked) {
                        window.demoViewTracked = true;
                        safeGtag('event', 'scroll_to_demo', {
                            'event_category': 'User_Engagement',
                            'event_label': 'Demo_Section_Viewed'
                        });
                        
                        // Track Funnel Step 2: Demo Viewed
                        safeGtag('event', 'funnel_step', {
                            'event_category': 'Conversion_Funnel',
                            'event_label': 'Step_2_Demo_Viewed',
                            'step_number': 2,
                            'step_name': 'API Demo Viewed'
                        });
                    }
                });
            }, { threshold: 0.3 });
            
            demoObserver.observe(demoSection);
        }
    });

    // Newsletter form handling with conversion tracking
    document.getElementById('newsletterForm').addEventListener('submit', function (e) {
        e.preventDefault();
        const email = this.querySelector('input[type="email"]').value;
        if (email) {
            // Track newsletter subscription as sign_up event (Critical Lead Generation!)
            safeGtag('event', 'sign_up', {
                'method': 'Email',
                'event_category': 'Newsletter',
                'event_label': 'Invoicing_Platform_Waitlist'
            });
            
            // Also track as lead generation
            safeGtag('event', 'generate_lead', {
                'event_category': 'Newsletter',
                'event_label': 'Email_Subscription',
                'value': 1,
                'currency': 'INR'
            });
            
            alert('Thank you for subscribing! We\'ll notify you when our platform launches.');
            this.reset();
        }
    });

    // Defer animations and scroll tracking for better initial load
    function initScrollAndAnimations() {
        // Intersection Observer for animations - Desktop only for performance
        if (window.innerWidth > 768) {
            const observerOptions = {
                threshold: 0.1,
                rootMargin: '0px 0px -50px 0px'
            };

            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('fade-in');
                    }
                });
            }, observerOptions);

            // Observe sections for animation
            document.querySelectorAll('section').forEach(section => {
                observer.observe(section);
            });
        }

        // Scroll depth tracking - Passive for better performance
        let scrollTimeout;
        window.addEventListener('scroll', function() {
            if (scrollTimeout) {
                return;
            }
            
            scrollTimeout = setTimeout(function() {
                scrollTimeout = null;
                
                const scrollPosition = window.scrollY + window.innerHeight;
                const scrollHeight = document.body.scrollHeight;
                const scrolled = (scrollPosition / scrollHeight) * 100;

                if (scrolled >= 25 && !window.scroll25Tracked) {
                    window.scroll25Tracked = true;
                    safeGtag('event', 'scroll_depth', {
                        'event_category': 'Scroll',
                        'event_label': '25% Page Scroll'
                    });
                }

                if (scrolled >= 50 && !window.scroll50Tracked) {
                    window.scroll50Tracked = true;
                    safeGtag('event', 'scroll_depth', {
                        'event_category': 'Scroll',
                        'event_label': '50% Page Scroll'
                    });
                }

                if (scrolled >= 75 && !window.scroll75Tracked) {
                    window.scroll75Tracked = true;
                    safeGtag('event', 'scroll_depth', {
                        'event_category': 'Scroll',
                        'event_label': '75% Page Scroll'
                    });
                }

                if (scrolled >= 90 && !window.scroll90Tracked) {
                    window.scroll90Tracked = true;
                    safeGtag('event', 'scroll_depth', {
                        'event_category': 'Scroll',
                        'event_label': '90% Page Scroll'
                    });
                }
            }, 200);
        }, { passive: true });
    }
    
    // Initialize scroll tracking after page is interactive
    if ('requestIdleCallback' in window) {
        requestIdleCallback(initScrollAndAnimations, { timeout: 3000 });
    } else {
        setTimeout(initScrollAndAnimations, 2000);
    }

    // API Demo: Tabs and Request Handling
    function showApiTab(tabName) {
        // Hide all API tab contents
        const contents = document.querySelectorAll('#api-demo .api-tab-content');
        contents.forEach(c => c.classList.add('hidden'));

        // Deactivate all API tab buttons
        const buttons = document.querySelectorAll('#api-demo .api-tab-btn');
        buttons.forEach(b => b.classList.remove('active'));

        // Activate selected
        const content = document.getElementById('api-tab-content-' + tabName);
        if (content) content.classList.remove('hidden');
        const btn = document.getElementById('api-tab-' + tabName);
        if (btn) btn.classList.add('active');

        // Clear meta and response placeholder when switching
        const meta = document.getElementById('api-meta');
        if (meta) meta.textContent = 'Status â€” â€¢ Time â€” â€¢ Size â€”';
        const resp = document.getElementById('api-response');
        if (resp) resp.innerHTML = '<div class="text-gray-400">Click "Send" to run the request.</div>';

        // Track endpoint selection (demo interaction)
        const endpointMap = {
            'scenario1': 'Fuzzy Search HSN',
            'scenario2': 'Get HSN Details',
            'scenario3': 'Get HSN Taxes',
            'scenario4': 'Fuzzy Search SAC',
            'scenario5': 'Get SAC Details',
            'scenario6': 'Get SAC Taxes'
        };
        
        safeGtag('event', 'demo_interaction', {
            'event_category': 'API_Demo',
            'event_label': endpointMap[tabName] || tabName,
            'endpoint': tabName
        });
    }

    // Pretty-print and colorize JSON
    function syntaxHighlightJson(jsonValue) {
        const jsonString = typeof jsonValue === 'string' ? jsonValue : JSON.stringify(jsonValue, null, 2);
        const escaped = jsonString
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;');
        return escaped.replace(/("(\\u[\da-fA-F]{4}|\\[^u]|[^\\"])*"\s*:?)|(\b(true|false|null)\b)|(-?\d+(?:\.\d+)?(?:[eE][+\-]?\d+)?)/g, function (match) {
            if (/^".*":$/.test(match)) {
                return '<span class="json-key">' + match + '</span>';
            } else if (/^"/.test(match)) {
                return '<span class="json-string">' + match + '</span>';
            } else if (/true|false/.test(match)) {
                return '<span class="json-boolean">' + match + '</span>';
            } else if (/null/.test(match)) {
                return '<span class="json-null">' + match + '</span>';
            }
            return '<span class="json-number">' + match + '</span>';
        });
    }

    async function sendDemoRequest(tabName) {
        // Send notification when user tries an API call
        sendNotification('ðŸ‘€ FastGST.in', window.location.href);
        
        // Map each scenario to its respective URL
        const urlMap = {
            'scenario1': 'https://api.taxlookup.fastgst.in/search/hsn?query=milk',
            'scenario2': 'https://api.taxlookup.fastgst.in/search/hsn/04041010',
            'scenario3': 'https://api.taxlookup.fastgst.in/search/hsn/04041010/taxes',
            'scenario4': 'https://api.taxlookup.fastgst.in/search/sac?query=tex',
            'scenario5': 'https://api.taxlookup.fastgst.in/search/sac/997326',
            'scenario6': 'https://api.taxlookup.fastgst.in/search/sac/997326/taxes'
        };
        
        const endpointNames = {
            'scenario1': 'Fuzzy Search HSN',
            'scenario2': 'Get HSN Details',
            'scenario3': 'Get HSN Taxes',
            'scenario4': 'Fuzzy Search SAC',
            'scenario5': 'Get SAC Details',
            'scenario6': 'Get SAC Taxes'
        };
        
        const url = urlMap[tabName] || 'https://api.taxlookup.fastgst.in/search/sac/997326/taxes';
        const endpointName = endpointNames[tabName] || tabName;
        const headers = {
            'X-API-Key': '****<YOUR API KEY>****'
        };

        const button = document.getElementById('api-send-' + tabName);
        const label = button ? button.querySelector('[data-label]') : null;
        const spinner = button ? button.querySelector('[data-spinner]') : null;
        const resp = document.getElementById('api-response');
        const meta = document.getElementById('api-meta');

        // Track that user clicked "Send" button (Critical Engagement!)
        safeGtag('event', 'api_test', {
            'event_category': 'API_Demo',
            'event_label': 'Test_Request_Sent',
            'endpoint': endpointName,
            'demo_type': 'live_playground'
        });

        try {
            if (button) button.disabled = true;
            if (label) label.textContent = 'Sending...';
            if (spinner) spinner.classList.remove('hidden');
            if (resp) resp.innerHTML = '<div class="text-gray-400">Loadingâ€¦</div>';

            const start = performance.now();
            const response = await fetch(url, { method: 'GET', headers });
            const timeMs = Math.round(performance.now() - start);

            const contentType = response.headers.get('content-type') || '';
            let bodyText = await response.text();
            let parsed = null;
            if (contentType.includes('application/json')) {
                try { parsed = JSON.parse(bodyText); } catch (_) {}
            }

            const bytes = new TextEncoder().encode(bodyText).length;
            const sizeText = bytes < 1024 ? bytes + ' B' : (bytes / 1024).toFixed(1) + ' KB';
            if (meta) meta.textContent = 'Status ' + response.status + ' â€¢ Time ' + timeMs + ' ms â€¢ Size ' + sizeText;

            const html = parsed ? syntaxHighlightJson(parsed) : syntaxHighlightJson(bodyText);
            if (resp) resp.innerHTML = '<pre class="whitespace-pre-wrap">' + html + '</pre>';

            // Track successful demo response
            if (response.ok) {
                safeGtag('event', 'demo_success', {
                    'event_category': 'API_Demo',
                    'event_label': endpointName,
                    'value': timeMs,
                    'metric_name': 'response_time_ms',
                    'status_code': response.status
                });
            } else {
                // Track non-200 responses as errors
                safeGtag('event', 'demo_error', {
                    'event_category': 'API_Demo',
                    'event_label': endpointName,
                    'error_type': 'HTTP_' + response.status
                });
            }
        } catch (err) {
            if (meta) meta.textContent = 'Error';
            if (resp) resp.innerHTML = '<div class="text-red-300">' + (err && err.message ? err.message : 'Request failed') + '</div>';
            
            // Track demo errors (Important for debugging!)
            safeGtag('event', 'demo_error', {
                'event_category': 'API_Demo',
                'event_label': endpointName,
                'error_type': err && err.message ? err.message : 'network_error'
            });
        } finally {
            if (button) button.disabled = false;
            if (label) label.textContent = 'Send';
            if (spinner) spinner.classList.add('hidden');
        }
    }

    // Initialize API tabs default
    document.addEventListener('DOMContentLoaded', function () {
        showApiTab('scenario3');
    });
</script>
{% endif %}

{% if page.url and '/pricing' in page.url %}
<script>
    // Pricing Page Tracking
    document.addEventListener('DOMContentLoaded', function() {
        // Track Plan Hover (View Intent)
        var pricingPlans = document.querySelectorAll('.bg-white.rounded-2xl, .bg-gradient-to-br.from-green-50');
        pricingPlans.forEach(function(plan) {
            var planName = 'Unknown';
            var planHeading = plan.querySelector('h3');
            if (planHeading) {
                planName = planHeading.textContent.trim();
            }
            
            plan.addEventListener('mouseenter', function() {
                safeGtag('event', 'view_item', {
                    'event_category': 'Pricing',
                    'event_label': planName,
                    'plan_type': 'hover_view'
                });
            });
        });

        // Track Pricing Tier Selection (Button Clicks)
        var selectButtons = document.querySelectorAll('a[href*="console.fastgst.in"]');
        selectButtons.forEach(function(button) {
            button.addEventListener('click', function() {
                var plan = this.closest('.bg-white, .bg-gradient-to-br');
                var planName = 'Unknown';
                var planPrice = '0';
                
                if (plan) {
                    var heading = plan.querySelector('h3');
                    if (heading) {
                        planName = heading.textContent.trim();
                    }
                    
                    var priceElement = plan.querySelector('.text-4xl');
                    if (priceElement) {
                        planPrice = priceElement.textContent.trim().replace(/[^0-9]/g, '');
                    }
                }
                
                safeGtag('event', 'add_to_cart', {
                    'event_category': 'Pricing',
                    'event_label': planName,
                    'value': parseInt(planPrice) || 0,
                    'currency': 'INR'
                });
                
                // Also track as high-intent conversion signal
                safeGtag('event', 'select_item', {
                    'event_category': 'Pricing',
                    'event_label': 'Plan_Selection_' + planName,
                    'items': [{
                        'item_name': planName,
                        'price': parseInt(planPrice) || 0,
                        'currency': 'INR'
                    }]
                });
            });
        });
    });
</script>
{% endif %}

